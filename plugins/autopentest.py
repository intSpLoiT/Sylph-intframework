import os
import json
import subprocess
from lib.int4.modules.creator import exploit, payload  # import your modules properly
from colorama import init, Fore, Style

init(autoreset=True)

class AutoPentest:
    def __init__(self):
        self.db_path = "db/set.int4"
        self.target = None
        self.port = None
        self.exploit_manager = exploit
        self.payload_manager = payload.PayloadManager()
        self.payload_manager.load_payloads()
        self.load_options()

    def load_options(self):
        """Load options from db/set.int4"""
        if os.path.exists(self.db_path):
            with open(self.db_path, "r") as f:
                data = json.load(f)
                self.target = data.get("target", None)
                self.port = data.get("port", None)
            print(Fore.GREEN + f"[+] Loaded options: target={self.target}, port={self.port}")
        else:
            print(Fore.RED + "[!] Options file not found.")

    def run_nmap_scan(self):
        """Run Nmap scan with basic vuln scripts"""
        if not self.target:
            print(Fore.RED + "[!] No target specified for Nmap scan.")
            return None

        print(Fore.CYAN + f"[*] Running Nmap vulnerability scan on {self.target}...")
        nmap_cmd = [
            "nmap",
            "-sV",
            "--script=vuln",
            "-p", self.port if self.port else "1-65535",
            self.target
        ]
        try:
            result = subprocess.run(nmap_cmd, capture_output=True, text=True, check=True)
            print(Fore.GREEN + "[+] Nmap scan completed.")
            print(result.stdout)
            return result.stdout
        except subprocess.CalledProcessError as e:
            print(Fore.RED + "[!] Nmap scan failed.")
            print(e.stderr)
            return None

    def parse_nmap_for_vulns(self, nmap_output):
        """Parse nmap output for possible vulnerabilities"""
        vulns = []
        lines = nmap_output.splitlines()
        for line in lines:
            if "VULNERABLE:" in line:
                vulns.append(line.strip())
        return vulns

    def auto_exploit(self, vulns):
        """Automatically run exploits for discovered vulnerabilities"""
        if not vulns:
            print(Fore.YELLOW + "[*] No vulnerabilities found to exploit.")
            return

        print(Fore.CYAN + "[*] Attempting to exploit found vulnerabilities...")
        for vuln in vulns:
            # Example parsing: extract service/port info or vulnerability name
            # For demonstration, we will just print and simulate exploit run
            
            print(Fore.MAGENTA + f"[!] Vulnerability detected: {vuln}")

            # Here you would map vulnerabilities to exploit module names
            # For demo, try to load example exploit module and run it

            example_exploit_module = "example_exploit.py"  # Change according to real module name

            try:
                self.exploit_manager.load_schema(f"modules/{example_exploit_module}")
                self.exploit_manager.load_context()
                
                # Example: set target and port for exploit module
                self.exploit_manager.set_option("target", self.target)
                self.exploit_manager.set_option("port", self.port if self.port else "80")
                
                # Run exploit module
                self.exploit_manager.run_module()
            except Exception as e:
                print(Fore.RED + f"[!] Exploit execution failed: {e}")

    def generate_payload(self, payload_name, **kwargs):
        """Generate payload code and save it"""
        code = self.payload_manager.generate(payload_name, **kwargs)
        if code:
            filename = self.payload_manager.save(code)
            print(Fore.GREEN + f"[+] Payload '{payload_name}' generated and saved as '{filename}'.")
        else:
            print(Fore.RED + f"[!] Payload '{payload_name}' not found or generation failed.")

    def run(self):
        """Main autopentest flow"""
        print(Fore.CYAN + "[*] Starting AutoPentest Plugin...")
        nmap_output = self.run_nmap_scan()
        if not nmap_output:
            return

        vulns = self.parse_nmap_for_vulns(nmap_output)
        self.auto_exploit(vulns)
        print(Fore.CYAN + "[*] AutoPentest completed.")

# Plugin interface
class Plugin:
    def __init__(self):
        self.name = "AutoPentest"
        self.commands = {
            "autopentest": {
                "desc": "Automatically run pentest scan and exploit",
                "usage": "autopentest",
                "func": self.cmd_autopentest
            },
            "generate_payload": {
                "desc": "Generate a payload by name",
                "usage": "generate_payload <payload_name>",
                "func": self.cmd_generate_payload
            },
            "show_payloads": {
                "desc": "List available payloads",
                "usage": "show_payloads",
                "func": self.cmd_show_payloads
            }
        }
        self.ap = AutoPentest()

    def cmd_autopentest(self, args):
        self.ap.run()
        return "[*] AutoPentest command finished."

    def cmd_generate_payload(self, args):
        if not args:
            return "[!] Usage: generate_payload <payload_name>"
        payload_name = args[0]
        self.ap.generate_payload(payload_name)
        return f"[*] Payload generation attempted for '{payload_name}'."

    def cmd_show_payloads(self, args):
        payloads = self.ap.payload_manager.list_payloads()
        return "[*] Available Payloads:\n" + "\n".join(f" - {p}" for p in payloads)